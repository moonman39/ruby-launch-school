What is a variable?
  - variables are used to store information to be referenced and manipulated in a
    computer program
  - provide a way of labeling data with a descriptive name, so our programs can
    be understood more clearly by the reader and ourselves
  - helpful to think of variables as containers that hold information
    - their sole purpose is to label and store data in memory, which can then be used
      throughout your program



Getting Data from a User
  - in the wild, you'll want other people to be able to interact with your programs
    in interesting ways
  - one way go get information from the user is to call the gets method
    - gets stands for "get string"
    - when you use it, the program waits for the user to 1) type in information
      2) press the enter key
      | name = gets
        Bob
        => "Bob\n"
      |



Variable Scope
  - a variable's scope determines where in a program a variable is available for use
  - a variable's scope is defined by where the variable is initialized or created
  -  in Ruby, variable scope is defined by a method definition or by a block

  - Variable Scope and Method Definitions
    | name = 'Somebody Else'

      def print_full_name(first_name, last_name)
        name = first_name + ' ' + last_name
        puts name
      end
    |
    - once we have the method defined, we can call it as many times as we need with
      different values for first_name and last_name:
      | print_full_name 'Peter', 'Henry'
        print_full_name 'Lynn', 'Blake'
        puts name       // prints Somebody
    
    - in terms of variable scope, methods have self-contained scope
      - this means that only variables initialized within the method's body can be
        referenced or modified within the method's body
      - additionally, variables initialized inside a method's body aren't available
        outside the method's body
  
  - Variable Scope and Blocks
    - a block is a piece of code that follows a method's invocation, delimited by
      either curly braces or do/end:
      | total = 0
        [1, 2, 3].each { |number| total += number }
        puts total # 6

        total = 0
        [1, 2, 3].each do |number|
          total += number
        end
        puts total # 6
    - in both cases, the code can access and modify variables that are defined outside
      of the block
        - thus, both blocks can access and modify total
        - however, any variables initialized inside the block (such as number), can't
          be accessed by the outer code
    - with blocks, the one rule that we want to emphasize is that:
      - inner scope can access variables initialized in an outer scope, but not
        vice versa



Types of Variables
  - there are five types of variables:
    - constants, global variables, class variables, instance variables, and local
      variables
  
    - constants
      - declared by capitalizing every letter in the variable's name
      - used for storing data that never needs to change
      - can't be declared in method definitions
      | MY_CONSTANT = "I am available throughout your app." |
    
    - global variables
      - declared by starting the variable name with the dollar sign ($)
      - available throughout your entire app, overriding all scope boundaries
      - Rubyists tend to stay away from global variables as there can be unexpected
        complications when using them
        | $var = "I am also available throughout your app." |
    
    - class variables
      - declared by starting the variable name with two @ signs
      - accessible by instances of your class, as well as the class itself
      - used when you need to declare a variable that is related to a class,
        but each instance of that class does not need its own value for this variable
      - must be initialized at the class level, outside of any method definitions
      - can be altered using class or instance method definitions
      | @@instances = 0 |

    - instance variables
      - declared by starting the variable name with one @ sign
      - available throughout the current instance of the parent class
      - can cross some scope boundaries, but not all of them
      | @var = "I am available throughout the current instance |
    
    - local variables
      - obey all scope boundaries
      - declared by starting the variable name with neither $ nor @, as well as
        not capitalizing the entire variable name
        | var = "I must be passed around to cross scope boundaries"




Key Takeways
- variables have limited scope within a method
  - methods can't access or change variables initialized outside of a method
  - different than blocks

